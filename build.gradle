plugins {
    id "java"
    id "maven-publish"
    id "com.google.protobuf" version "0.8.2"
    id "org.ajoberstar.grgit" version "2.0.0"
    id "org.springframework.boot" version "1.5.6.RELEASE"
}

group 'io.prodrink.catalog'

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

ext {
    grpcVersion = '1.5.0'
    guavaVersion = '23.0'
    logbackVersion = '1.2.3'

    protocVersion = '3.3.0'

    protoDefPackageName = 'catalog'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                outputSubDir = "java"
            }
        }
    }

    generatedFilesBaseDir = "$projectDir/src"
}

dependencies {
    compile ("org.springframework.boot:spring-boot-starter-jdbc") {
        exclude module: 'tomcat-jdbc'
    }

    compile "org.springframework.boot:spring-boot-starter-data-jpa"

    compile "org.postgresql:postgresql"
    compile "org.liquibase:liquibase-core"
    compile "com.zaxxer:HikariCP"

    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"

    compile "com.google.guava:guava:${guavaVersion}"

    compile "ch.qos.logback:logback-classic:${logbackVersion}"
    compile "ch.qos.logback:logback-core:${logbackVersion}"

    compileOnly "org.projectlombok:lombok"

    testCompile ("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'com.vaadin.external.google:'
    }

    testCompile "com.h2database:h2"
}

task cloneProtoDefRepository {
    doLast {
        new File("$projectDir/src/main/java/io/prodrink/catalog/generated").deleteDir()

        def protoFolderPath = 'src/main/proto'
        new File(protoFolderPath).deleteDir()

        org.ajoberstar.grgit.Grgit.clone(
                dir: protoFolderPath,
                uri: 'git@github.com:prodrink/proto.git'
        )

        new File(protoFolderPath).listFiles().each { file ->
            if (!file.isDirectory() || file.name != protoDefPackageName) {
                file.isDirectory() ? file.deleteDir() : file.delete()
            }
        }
    }
}
